<?php/*  Plugin Name: Healthy BMI Calculator  Plugin URI: http://sandymcfadden.com/2014/07/16/healthy-bmi-calculator-wordpress-plugin/  Description: Provides a customizable BMI Calculator as a widget or shortcode. Can only be one calculator per page.  Author: Sandy McFadden  Version: 1.2.1.1  Author URI: http://sandymcfadden.com*/?><?php/*  Copyright 2014  Sandy McFadden  (email : sandymc@gmail.com)    This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License, version 2, as     published by the Free Software Foundation.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License    along with this program; if not, write to the Free Software    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA*/// Code adjusted from http://codereview.stackexchange.com/questions/21581/calculating-body-mass-index-bmifunction sm_health_bmi_enqueue_scripts() {  wp_enqueue_script( 'bmi-calc-script', plugins_url( '/sm-bmi-calculator.js' , __FILE__ ), array(), '1.0.0', true );  wp_enqueue_style( 'bmi-calc-style', plugins_url( '/sm-bmi-calculator.css' , __FILE__ ) );}function sm_display_bmi_calculator($type, $instance = null) {  static $sm_bmi_count = 1;  if ($sm_bmi_count == 1) {    sm_health_bmi_enqueue_scripts();  }  if ($type == 'widget' && $instance != null) {    $color = $instance['color'];  } else {    $color = '#2EA3F2';  }  $calc = '  <div id="bmi_calc_wrap" class="sm_bmi_calc_'. $type .'">    <form name="bmiForm" id="bmi_calc_form" action="">      <p><label for="bmi_unit_us">US <input id="bmi_unit_us" type="radio" value="1" name="bmi_units" checked="checked"></label> or <label for="bmi_unit_metric">Metric <input id="bmi_unit_metric" type="radio" value="2" name="bmi_units"></label></p>      <h5>Enter your weight</h5>      <div id="bmi_weight_us">        <p><label for="bmi_weight_pounds">Pounds</label> <input id="bmi_weight_pounds" type="number" name="pounds" step="0.1" min="0"></p>      </div>      <div id="bmi_weight_metric" style="display: none;">        <p><label for="bmi_weight_kgs">KGs</label> <input id="bmi_weight_kgs" type="number" name="kgs" step="0.01" min="0"></p>      </div>      <h5 style="padding-top: 10px;">Enter your height</h5>      <div id="bmi_height_us">        <p>          <label for="bmi_height_feet">Feet</label> <input id="bmi_height_feet" type="number" name="feet" step="1" min="0">          <label for="bmi_height_inches">Inches</label> <input id="bmi_height_inches" type="number" name="inches" step="1" min="0">        </p>      </div>      <div id="bmi_height_metric" style="display: none;">        <p><label for="bmi_height_cms">CMs</label> <input id="bmi_height_cms" type="number" name="cms" step="0.01" min="0"></p>      </div>      <p><a href="#" id="bmi_calc_button" style="border-color: '. $color .';">Calculate BMI</a></p>    </form>  </div>  <div id="bmi_calc_results" style="display: none; background: '. $color .'; "></div>';    // JavaScript currently depends on specific ID's. If more than one calculator is displayed on a page it will fail.  if ($sm_bmi_count > 1)    $calc = '<p>Only one BMI Calculator allowed per page.</p>';  $sm_bmi_count++;  return $calc;}// Creating the widget class sm_health_bmi_widget extends WP_Widget {    function __construct() {    parent::__construct('sm_health_bmi_widget', __('BMI Calculator', 'sm_health_bmi_widget_domain'), array( 'description' => __( 'A Simple BMI Calculator Widget', 'sm_health_bmi_widget_domain' ), ));  }  // Creating widget front-end  // This is where the action happens  public function widget( $args, $instance ) {    $title = apply_filters( 'widget_title', $instance['title'] );    if ($title == '')      $title = 'Calculate BMI';    // before and after widget arguments are defined by themes    echo $args['before_widget'];    if ( ! empty( $title ) )      echo $args['before_title'] . $title . $args['after_title'];    echo sm_display_bmi_calculator('widget', $instance);    echo $args['after_widget'];}// Widget Backend public function form( $instance ) {  if ( isset( $instance[ 'title' ] ) ) {    $title = $instance[ 'title' ];  }  else {    $title = __( 'BMI Calculator', 'sm_health_bmi_widget_domain' );  }  if ( isset( $instance[ 'color' ] ) ) {    $color = $instance[ 'color' ];  }  else {    $color = __( '#2EA3F2', 'sm_health_bmi_widget_domain' );  }?>  <p>    <label for="<?php echo $this->get_field_id( 'title' ); ?>"><?php _e( 'Title:' ); ?></label>    <input class="widefat" id="<?php echo $this->get_field_id( 'title' ); ?>" name="<?php echo $this->get_field_name( 'title' ); ?>" type="text" value="<?php echo esc_attr( $title ); ?>">  </p>  <p>    <label for="<?php echo $this->get_field_id( 'color' ); ?>"><?php _e( 'Color:' ); ?></label>    <input class="widefat" id="<?php echo $this->get_field_id( 'color' ); ?>" name="<?php echo $this->get_field_name( 'color' ); ?>" type="text" value="<?php echo esc_attr($color); ?>">  </p><?php}  // Updating widget replacing old instances with new  public function update( $new_instance, $old_instance ) {    $instance = array();    $instance['title'] = ( ! empty( $new_instance['title'] ) ) ? strip_tags( $new_instance['title'] ) : '';    $instance['color'] = ( ! empty( $new_instance['color'] ) ) ? strip_tags( $new_instance['color'] ) : '';    return $instance;  }} // Class sm_health_bmi_widget ends here// Register and load the widgetfunction sm_health_bmi_load_widget() {  register_widget( 'sm_health_bmi_widget' );}add_action( 'widgets_init', 'sm_health_bmi_load_widget' );// Add shortcodefunction get_sm_health_bmi_shortcode($atts) {  return sm_display_bmi_calculator('shortcode');}add_shortcode('sm_bmi_calculator', 'get_sm_health_bmi_shortcode');?>